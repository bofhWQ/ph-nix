Vorgänger Projekte:

vr|framework
WQ
Flow3

Lession learned
vr|framework:
Positives:
- ein Eintrittspunkt
- Alle Eingaben stehen in $in
- Alle Ausgaben in $output
- Paradigma Eingabe  -> Verarbeitung -> Ausgabe ( Ein Header kann auch am Ende der Verarbeitung gesetzt werden )
- Template bietet echte Trennung von Code und Design
- Grundlage für Mehrsprachigen Portale ( Inhalt + GUI )
- Mehrere Firmen mit Kooperationsmöglichkeiten ( keine reine Mandanten! )

Negatives:
- benötigt zu viel Speicher
- Template Engine nicht performat
- nutzt PHP4 Syntax
- Viel unnützer und redundanter Code

WQ:
Positives:
- Performance steht im Vordergrund
    a) Minimieren der SQL Statments
    b) Optimieren der SQL Statments
    c) cachen der Inhalte in der Session
- Struktur für DB Cluster ( SQL Statments getrennt nach dbread und dbwrite , Fallbackstrategie falls ein Slave ausfällt etc )
- Multiserver Konzept ( Pic-Server, WWW-Server, DB-Server )
Negatives:
- Code Qualität miserabel!
- Code Qualität miserabel!
- Code Qualität miserabel!
- Code Qualität miserabel!
- Code Qualität miserabel!
- Code Qualität miserabel!

Flow3:
PHP mit AOP setzt auf Doctrine auf
Legt automatisch DB-Tabellen an

Vorteile:
- Wenn phpdoc Kommentare vorhanden sind wird automatich eine Typüberprüfung durchgeführt
- Einzelen Module können deaktiviert werden
- durch AOP und Dependency injection verringert sich der Quelltext enorm

Nachteil:
- Wenn DB Vorhanden ist, wird es aufwendig
- Um AOP zu ermöglichen, wird der Quelltext vor der Ausführung modifiziert

Ziele:
======
- Sicherheit first
- Performat ( CPU und RAM )
- Write Once Run everywhere


Design Ziele:
- OOP
- PHP7 mit type declarion der Parameter
- Konvetion statt Konfiguration
- Selbstdokumentierend
- Multiformat Ausgabe ( HTML,JSON,XML)
- MVC Ansatz
    a) strikte Trennung von Design, Buissnesslogik und Persitenz
    b) Trennung von HTML Gerüst, "Style" und "Skin"
- benutzen von Konstanten wo keine Variablen benötigt werden ( Konfig-Bereich) ???
- Magic in den Coreklassen, Bussiness Logik ohne Schnickschack in den den abgeleiteten Klassen


zu lösende Probleme
- einladen von Klassenkonstanten über externen config File
Klassen konstanten können so nicht vereinbart werden, config wird in statische Variablen geladen

- OOP Session

- integrated Debugger

- integrated Profiler

- performates Template System

- Config-File updater
erste Version

- integrated Configurator

- integrated Skin Konfigurator

- integrated Ad-Partnership Network

- Runtime konfigration von Sicherheitsfeature ( Tests bei Registrierung und Login )

- flexible Datenklasse mit Möglichkeit die Daten für bestimmte Ausgabesituation zu behandeln ( htmlentities, DB-escape, intval)

- Automatisches Befüllen dieser Datenklasse nach einen MySQL Query


Sicherheit:
===========
- Daten sind so lange wie möglich raw
- Escape geschieht dort wo es gebraucht wird, so weit wie möglich automatisch:
- Das heisst in der DB Klasse werden Daten: über mysql_real_escape formatiert
- Da in dynamischen Querys auch Daten gibt, die andere Ansprüche stellen muss es eine Möglichkeit geben dem SQL Statment
  Formatierungshinweise zu geben. Vorbild : SafeMySQL
- Templatesystem gibt es pro Format eine Standardformatierungsfunktion ( für HTML : HTML-Entities )
- Formatierung der Daten sollte nicht im Conroller, sonder im Template geshehen ( Datum, Zeit Formatierungen )
- I Template werden Filter benötigt, die bei Bedarf eine andere Formatierung erzwingen ( JS, Attribute usw. )



Templatesystem:
===============

In der 1. Version wurde vorallem auf die Trennung von Logik und Darstellung Wert gelegt.
Das führt dazu, dass Formatierungen ( z.B. Datum ) im Controller, oder sogar schon im Modell gemacht werden
Diese Funktionen sollen ins Template wandern.
Neben diesen sollten auch die Sicherheit ins Template wandern. ( Vorbild: TWIG )




